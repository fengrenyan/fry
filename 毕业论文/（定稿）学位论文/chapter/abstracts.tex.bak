

%\begin{abstract}
反应式系统是在对应用程序的即时响应（responsive）、回弹性（resilient）、弹性（elastic）以及消息驱动（message driven）要求的基础上产生和发展起来的不终止系统。
随着反应式系统越来越复杂，系统正确性、系统及其系统规范（specification）之间的一致性越来越难以得到保证。
模型检测是一个保证系统正确性行之有效的方法之一，此时反应式系统被表示为一个Kripke结构。然而在模型检测中，若系统不满足给定的规范（即与规范不一致），寻找使得系统满足规范所需的最弱信息是长时间以来的一个重要问题。与这个问题密切相关的两个概念是最强必要条件（the strongest necessary condition, SNC）和最弱充分条件（the weakest sufficient condition, WSC），其分别对应于形式化验证中的最强后件（the strongest post-condition, SP）和最弱前件（the weakest precondition, WP）。
然而，现有的方法不能计算像反应式系统这样不终止系统的SNC和WSC。
此外，随着系统的更新和演化，现有的规范不可避免地会与新的知识相冲突。
此时，如何将之前融入的元素在不影响其它信息的情况下“移除”也是个亟待解决的问题。

系统规范的描述语言以时序逻辑为主。其中计算树逻辑（computation tree logic，$\CTL$）是一种重要的分支时间时序逻辑，其具有模型检测能多项式时间完成的特性，因此被广泛用于系统规范描述中。但是$\CTL$具有表达能力不够强的缺陷，$\mu$-演算（$\mu$-calculus）是一种比$\CTL$表达能力更强但模型检测更加复杂的逻辑语言。
尽管如此，$\CTL$和$\mu$-演算的语义都是Kripke语义，这与反应式系统被表示为Kripke结构有着直接的联系。
因而，本文以这两种逻辑语言为研究背景，探索这两种语言下反应式系统上述问题的解决方法。

遗忘是一种知识抽取技术，其被应用于信息隐藏、冲突解决、多智能体中的知识融合、本体摘要提取和计算逻辑差等领域。特别地，在情景演算中，遗忘被用于求解WSC和SNC，从而计算智能规划中的后继状态公理。
本文从遗忘的角度出发解决上述提到的问题，
主要研究成果如下：

%遗忘是一种知识抽取的技术，其被应用于信息隐藏、冲突解决和计算逻辑差等领域。本文从遗忘的角度出发解决上述提到的问题，
%主要研究成果如下：


 1. 研究了$\CTL$下遗忘的概念及其相关性质。首先，从模型在某个原子命题集合上互模拟的角度给出了遗忘的定义；其次，探讨并证明了遗忘算子的代数属性，包括模块性、交换性和同质性；第三，基于Zhang等人提出的四条公设，给出$\CTL$遗忘的四条公设，表示定理表明这四条公设对遗忘是充分且必要的，即：遗忘的结果满足四条公设，且满足这四条公设的公式为遗忘的结果。为了计算$\CTL$遗忘，本文提出了两种计算方法：

\begin{itemize}
 \item 基于归结的方法计算$\CTL$下的遗忘。该方法使用Zhang等人提出的归结系统$R_{\CTL}^{\succ,S}$（ clausal resolution calculus for CTL）。在此方法中，首先将$\CTL$公式转换为 $\CTLsnf$ 子句（separated normal form with global clauses for \CTL）的集合，最后再将 $\CTLsnf$ 子句转换为$\CTL$公式。在这一过程中，需要计算遗忘的公式总是和各个过程的输出保持互模拟等价关系。
 \item 基于模型的$\CTL$遗忘计算方法。本文证明了$\CTL$遗忘结果不总是存在的，即：存在一些公式遗忘原子命题集的结果不可用$\CTL$公式表示。因此，探讨了遗忘总是存在的约束$\CTL$。在这种方法中，规定了公式的长度为整数$n$、公式所依赖的模型个数为有限个及构成公式的原子命题是有限的。此时，公式的模型可以用其特征公式——$\CTL$公式来表示。因此，遗忘结果可以由其所有模型在给定原子命题集合上的特征公式的析取来表示。
\end{itemize}
%1) 基于归结的方法计算$\CTL$下的遗忘。该方法使用Zhang等人提出的归结系统$R_{\CTL}^{\succ,S}$（ clausal resolution calculus for CTL）。在这种方法中，首先将$\CTL$公式转换为$\CTLsnf$子句（separated normal form with global clauses for \CTL）的集合，最后再将$\CTLsnf$子句转换为$\CTL$公式。在这一过程中，需要计算遗忘的公式总是和各个过程的输出保持互模拟等价关系。
%
%2) 基于模型的$\CTL$遗忘计算方法。本文证明了$\CTL$遗忘结果不总是存在的，即：存在一些公式遗忘原子命题集的结果不可用$\CTL$公式表示。因此，探讨了遗忘总是存在的约束$\CTL$。在这种方法中，规定了公式的长度为整数$n$、公式所依赖的模型个数为有限个及构成公式的原子命题是有限的。此时，公式的模型可以用其特征公式——$\CTL$公式来表示。因此，遗忘结果可以由其所有模型在给定原子命题集合上的特征公式的析取来表示。

2. 研究了$\mu$-演算遗忘。$\mu$-演算具有均匀插值（uniform  interpolation）性质，本文证明了$\mu$-句子遗忘与均匀插值是等价的。此外，提出一种新的互模拟，并证明$\mu$-公式对这种互模拟是{\em 不变的}（invariant）。
最后，研究了$\mu$-演算下遗忘的基本属性和复杂性，为均匀插值的研究提供了新的思路。

3. 给出了遗忘与WSC（SNC）和知识更新（knowledge update）的关系。WSC对模型的验证和修改具有重要作用，现有方法只能计算可终止模型的WSC，而不能计算像反应式系统这类不可终止系统的WSC。本文通过遗忘给出了计算WSC（SNC）的方法，利用遗忘定义了$\CTL$和$\mu$-演算下的知识更新，并证明其满足Katsuno等人提出的知识更新的八条公设。


4. 用Prolog实现了1中提到的基于归结的计算$\CTL$遗忘的算法，并做了相应的实验。从标准数据集和随机产生的数据集里做了两组实验，分别为计算遗忘和SNC。实验表明公式越长或遗忘的原子个数越多，效率越低；此外，在随机产生的公式中，大部分情况下能计算出SNC。

%1. 研究了$\CTL$下遗忘的概念及其相关性质。首先，从模型在某个原子命题集合上互模拟的角度给出了遗忘的定义；其次，探讨并证明了遗忘算子的代数属性，包括模块性、交换性和同质性；第三，基于Zhang等人提出的四条公设，给出$\CTL$遗忘的四条公设，表示定理表明这四条公设对遗忘是充分且必要的，即：遗忘的结果满足四条公设，且满足这四条公设的公式为遗忘的结果。
%
%2. 研究了$\mu$-演算遗忘。$\mu$-演算具有均匀插值（uniform  interpolation）性质，本文证明了$\mu$-句子遗忘与均匀插值是等价的。此外，提出一种新的互模拟，并证明$\mu$-公式对这种互模拟是{\em 不变的}（invariant）。
%最后，研究了$\mu$-演算下遗忘的基本属性和复杂性，为均匀插值的研究提供了新的思路。
%
%3. 给出了遗忘与WSC（SNC）和知识更新（knowledge update）的关系。WSC对模型的验证和修改具有重要作用，现有方法只能计算可终止模型的WSC，而不能计算像反应式系统这类不可终止系统的WSC。本文通过遗忘给出了计算WSC（SNC）的方法，利用遗忘定义了$\CTL$和$\mu$-演算下的知识更新，并证明其满足Katsuno等人提出的知识更新的八条公设。
%
%
%4. 提出一种基于模型的$\CTL$遗忘计算方法。在这种方法中，规定了公式的长度为整数$n$、公式所依赖的模型个数为有限个及构成公式的原子命题是有限的。此时，公式的模型可以用其特征公式——$\CTL$公式来表示。因此，遗忘结果可以由其所有模型在给定原子命题集合上的特征公式的析取来表示。%，显然该公式是一个$\CTL$公式（即：遗忘在这种情形下是封闭的）。
%
%
%5. 提出一种基于归结的方法计算$\CTL$下的遗忘。该方法使用Zhang等人提出的归结系统$R_{\CTL}^{\succ,S}$（ clausal resolution calculus for CTL）。在这种方法中，首先将$\CTL$公式转换为$\CTLsnf$子句（separated normal form with global clauses for \CTL）的集合，最后再将$\CTLsnf$子句转换为$\CTL$公式。在这一过程中，需要计算遗忘的公式总是和各个过程的输出保持互模拟等价关系。
%
%
%6. 利用Prolog实现了5中提到的基于归结的计算$\CTL$遗忘的方法，并做了相应的实验。从标准数据集和随机产生的数据集里做了两组实验，分别为计算遗忘和SNC。实验表明公式越长或遗忘的原子个数越多，效率越低；此外，在随机产生的公式中，大部分情况下能计算出SNC。

这些结果为时序逻辑下的遗忘理论的研究提供了框架，并为模型更新提供了辅助工具——WSC。




\keywords{遗忘理论，最强必要条件，最弱充分条件，知识更新，人工智能}
\end{abstract}


\begin{englishabstract}
A reactive system is a nonterminal system generated and developed on the basis of responsive, resilient, elastic, and message-driven requirements of the application program.  As the reaction system becomes more and more complex, the correctness of a system and the consistency between the system and its specification become more and more difficult to be guaranteed. 	
Model checking is an effective method to ensure a system's correctness, and a reactive system is represented as a Kripke structure in such an environment.  However, in model checking, if a system does not meet the given specification (that is, it does not conform to the specification), it has been an important problem for a long time to find the weakest information needed to make the system meet the specification.
The strongest necessary condition (SNC) and the weakest sufficient condition (WSC)  are two crucial concepts that correspond to the strongest post-condition (SP) and the weakest precondition (WP) in verification, respectively. However, existing methods cannot calculate the SNC and WSC of nonterminal systems, such as reactive systems.
In addition, as systems update and evolve, existing specifications inevitably conflict with new knowledge. In this sense, how to ``remove" the previously integrated atoms without affecting other information is also an urgent problem to be solved.
	
	
Temporal logic is one of the important logic describing the specification of systems.   Computation tree logic ($\CTL$) is an important branch-time temporal logic, which is widely used in system specification description because of its characteristic that model checking can be done in polynomial time.  However, $\mu$-calculus is a logic language with more vital expression ability but more complex model checking than $\CTL$.
Nevertheless, $\CTL$ and $\mu$-calculus are interpreted under Kripke semantics, which is directly related to the reactive system being expressed as a Kripke structure.
Therefore, this paper takes these two logical languages as the research background to explore the solutions to the above problems of reactive systems.


Forgetting was first formally defined in propositional logic (PL) and FOL by Lin and Reiter. As a technique for distilling knowledge, it has been explored in various logic languages and is widely used in AI, such as information hiding, conflict resolving, knowledge integration in multi-agent, ontology abstract extraction, and logical difference computation. In particular, forgetting is used to solve WSC and SNC in a scenario of situation calculus to compute the successor state axioms in planning. This paper aims to solve the above-mentioned problems from the perspective of forgetting. The main contributions of the paper are as follows:


1. Given the definition and properties of forgetting in $\CTL$. First, this paper defines forgetting from the point of bisimulation over the given signature. Second, we explore the algebraic properties, including decomposition, slice, and homogeneity, of forgetting. Third, the expression theorem shows that there is an ``if and only if” relation between forgetting and the forgetting postulates proposed by Zhang et al., i.e., the result of forgetting satisfies the forgetting postulates, and the formula which satisfies the forgetting postulates is the result of forgetting.
To calculate $\CTL$ forgetting, this paper proposes two approaches:

\begin{itemize}
	\item A resolution-based method. This approach is based on the resolution system proposed by Zhang et al., and the $\CTL$ formula is transformed into a set of $\CTLsnf$ clauses (separated normal form with global clauses for $\CTL$) at first. At the end of the approach, the $\CTLsnf$ clauses are transformed into a $\CTL$ formula to obtain the forgetting result. Throughout the process, the formula to be calculated always maintains bisimilar equivalence with the output of each process.
	%It is noteworthy that the output of each process is bisimilar equivalent of the input $\CTL$ formula.
	\item A model-based method. This paper shows that the result of forgetting in $\CTL$ does not always exist, i.e., forgetting some atoms from some formula can not be expressed by a $\CTL$ formula. However, it proves that the forgetting always exists in bounded $\CTL$, i.e., the size (the number of signatures in a formula) of formulas are limited to an integer, the set of atoms that construct the formulas, and the state space are finite. Therefore, the model of a formula can be expressed by its characterizing formula, and then the forgetting result is the disjunction of the characterizing formulas of its models.
\end{itemize}

2. Explored the forgetting in $\mu$-calculus. $\mu$-calculus is a kind of logic which have uniform interpolation. This paper shows that the uniform interpolation and forgetting  are equivalent for $\mu$-sentence.
In addition, we define a general bisimulation on valuations, $\tuple{X,V}$-bisimulation, in which $X$ is a set of variables and $V$ is a set of atoms.  It is proved that  $\mu$-calculus is invariant under $\tuple{X,V}$-bisimulation.
% That is to say, if two valuations behave the same when discarding  the atoms in $V$ and variables in $X$ then they satisfy the same $\mu$-formulas that are irrelevant to $X\cup V$.
Finally, the properties and complexity results related to forgetting are given, which proposes a new point for studying uniform interpolation.

3. Given the relation between forgetting and WSC (SNC or knowledge update). WSC is important to the verification and modification of the system. However， the existing methods can only compute the WSC of a terminable system, and the WSC can not be obtained in non-terminable systems (e.g., the reactive system). This paper shows how to compute the WSC of the reactive system and define the knowledge update using forgetting to satisfy the postulates proposed by~\citeauthor{katsuno91mendelzon}.

4.  Implemented the algorithm proposed in 1, and some experiments are shown. Two experiments,  i.e., computing forgetting and WSC, were performed for standard and randomly generated datasets. Experiments show that the longer the formula is, or the more atoms are forgotten, the lower the efficiency is. Moreover, SNC can be calculated in most cases of randomly generated formulas.

Its significance mainly provides a framework for the study of forgetting theory under temporal logic and provides an auxiliary tool for the model update.


\englishkeywords{forgetting，the strongest necessary condition，the weakest sufficient condition，knowledge update}


	
%	
% With the software (hardware) systems of a computer becoming more and more complex, it gets hard to guarantee the correctness of systems and the consistency between systems and its specification.
%Model checking is a valid method to ensure the correctness of systems. However, it is an important problem in model checking to fix the system to make it consistent with its specification when the system does not satisfy the given specification.
%Moreover, in such a scenario, two logical notions introduced by E. Dijkstra are highly informative: the \emph{strongest necessary condition} (SNC) and the \emph{weakest sufficient condition}  (WSC)  of a given specification. These correspond to the \emph{strongest post-condition} (SP) and the \emph{weakest precondition} (WP) of such specification, respectively.
%Besides, the specification at hand is an unavoidable conflict with the new knowledge when the information of the system becomes clearer. In this case, another problem that needs to solve is to ``\emph{eliminate}” the containing elements without affecting the other information.
%
%\emph{Forgetting}, a technique to distill knowledge, was used to hide information, solve the conflict, compute logic differences, and so on. This paper solves the above problems from the point of forgetting. The major contributions are as follows:
%
%1. Given the definition and properties of forgetting in $\CTL$. First, this paper defines forgetting from the point of bisimulation over the given signature. Second, we explore the algebraic properties, including modularity, commutativity, and homogeneity, of forgetting. Third, the expression theorem shows that there is an ``if and only if” relation between forgetting and the forgetting postulates proposed by Zhang et al., i.e., the result of forgetting satisfies the forgetting postulates, and the formula which satisfies the forgetting postulates is the result of forgetting.
%
%2. Proposed a resolution-based method to compute the forgetting in $\CTL$. This approach bases the resolution system proposed by Zhang et al., and the $\CTL$ formula is transformed into a set of $\CTLsnf$ clauses (separated normal form with global clauses for $\CTL$) at first. At the end of the approach, the $\CTLsnf$ clauses are transformed into a $\CTL$ formula to obtain the forgetting result. It is noteworthy that the output of each process is bisimilar equivalent of the input $\CTL$ formula.
%
%3. We outline a situation in which the forgetting is closed. In this case, the length of formulas are limited to integer $n$, and the number of atoms for formulas and Kripke structures is finite. To prove that it is closed, we define the characterizing formula (i.e., a \CTL\ formula) of the (finite) initial \MPK-structure and show that each \CTL\ formula is equivalent to a disjunction of the characterizing formulas of its models.  This fact means that the result of forgetting some atoms from a \CTL\ formula always exists.
%
%4. Explored the forgetting in $\mu$-calculus. $\mu$-calculus is a kind of logic which have uniform interpolation. This paper shows that the uniform interpolation and forgetting in $\mu$-calculus are equivalent, this means that the forgetting in $\mu$-calculus is closed which is the biggest difference between $\mu$-calculus and $\CTL$. Moreover, the properties and complexity results related to forgetting are given, which proposes a new point for studying uniform interpolation.
%
%5. Given the relation between forgetting and WSC (SNC or knowledge update). WSC is important to the verification and modification of the system. However， the existing methods can only compute the WSC of a terminable system, and the WSC can not be obtained in non-terminable systems (e.g., the reactive system). This paper shows how to compute the WSC of the reactive system and define the knowledge update using forgetting to satisfy the postulates proposed by~\citeauthor{katsuno91mendelzon}.
%
%6. Implemented the algorithm proposed in 2, and some experiments are shown. Two experiments, computing forgetting, and SNC, were performed for standard and randomly generated datasets. Experiments show that the longer the formula is or the more atoms are forgotten, the lower the efficiency is. Moreover, SNC can be calculated in most cases of randomly generated formulas.
%
%Its significance mainly provides a framework for the study of forgetting theory under temporal logic and provides an auxiliary tool for the model update.
%
%
%\englishkeywords{forgetting，the strongest necessary condition，the weakest sufficient condition，knowledge update}
\end{englishabstract}
